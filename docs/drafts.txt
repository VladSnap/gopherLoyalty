Сформируй openapi спецификацию для создания rest api приложения. В формате json. Все модели данных в формате json.

Список обработчиков api:
1. POST /api/user/register - регистрация пользователя

Модель запроса:
login string - логин.
password string - пароль.

Возможные коды ответа:
200 — пользователь успешно зарегистрирован и аутентифицирован;
400 — неверный формат запроса;
409 — логин уже занят;
500 — внутренняя ошибка сервера.


2. POST /api/user/login - Аутентификация пользователя

Модель запроса:
login string - логин.
password string - пароль.

Возможные коды ответа:
200 — пользователь успешно аутентифицирован;
400 — неверный формат запроса;
401 — неверная пара логин/пароль;
500 — внутренняя ошибка сервера.


3. POST /api/user/orders - Загрузка номера заказа. Требуется аутентификация.

Запрос text/plain, тело содержит номер заказа. Номером заказа является последовательность цифр произвольной длины.

Возможные коды ответа:
200 — номер заказа уже был загружен этим пользователем;
202 — новый номер заказа принят в обработку;
400 — неверный формат запроса;
401 — пользователь не аутентифицирован;
409 — номер заказа уже был загружен другим пользователем;
422 — неверный формат номера заказа;
500 — внутренняя ошибка сервера.


4. GET /api/user/orders - Получение списка загруженных номеров заказов. Требуется аутентификация и авторизация.

Запрос без тела и параметров.
Модель ответа:
number string - Номер заказа.
status status_enum - Текущий статус заказа.
accrual number - Сумма начилсенных баллов, необязательное поле.
uploaded_at date in format RFC3339 - Дата загрузки заказа в систему.

Описание status_enum:
NEW — заказ загружен в систему, но не попал в обработку;
PROCESSING — вознаграждение за заказ рассчитывается;
INVALID — система расчёта вознаграждений отказала в расчёте;
PROCESSED — данные по заказу проверены и информация о расчёте успешно получена.

Возможные коды ответа:
200 — успешная обработка запроса.
204 — нет данных для ответа.
401 — пользователь не авторизован.
500 — внутренняя ошибка сервера.


5. GET /api/user/balance - Получение текущего баланса счёта баллов лояльности пользователя. Требуется аутентификация и авторизация.

Запрос без тела и параметров.
Модель ответа:
current number - Текущая сумма баллов лояльности.
withdrawn number - Сумма использованных за весь период регистрации баллов.

Возможные коды ответа:
200 — успешная обработка запроса.
401 — пользователь не авторизован.
500 — внутренняя ошибка сервера.


6. POST /api/user/balance/withdraw - Запрос на списание баллов с накопительного счёта в счёт оплаты нового заказа. Требуется аутентификация и авторизация.

Модель запроса:
order string - Номер заказа.
sum number - Сумма баллов к списанию в счёт заказа.

Возможные коды ответа:
200 — успешная обработка запроса;
401 — пользователь не авторизован;
402 — на счету недостаточно средств;
422 — неверный номер заказа;
500 — внутренняя ошибка сервера.


7. GET /api/user/withdrawals - Получение информации о выводе средств с накопительного счёта пользователем. Требуется аутентификация и авторизация.

Запрос без тела и параметров.
Модель ответа:
order string - Номер заказа.
sum number - Сумма баллов списанная в счёт заказа.
processed_at date in format RFC3339 - дата и время когда заказ был обработан.


----------

Order
ID uuid
Number string
UploadedAt datetime
UserID int -> user.ID
BonusCalculationID -> bonusCalculation.ID
Status enum (NEW, INVALID, PROCESSING, PROCESSED)

BonusCalculation
ID uuid
OrderID -> order.ID
LoyaltyStatus enum (NEW?, REGISTERED, INVALID, PROCESSING, PROCESSED)
Accrual int

UserAccount
ID uuid
UserID int -> user.ID
login string
password string

User
ID uuid
UserAccountID -> userAccount.ID
LoyaltyAccountID -> loyaltyAccount.ID

LoyaltyAccount
ID uuid
balance int - Хранит актуальное состояние счета с целью оптимизации.
withdrawTotal int - Хранит сколько всего было списано баллов, с целью оптимизации.

LoyaltyAccountTransaction
ID uuid
CreatedAt datetime
LoyaltyAccountID -> loyaltyAccount.ID
TransactionType enum (withdraw, accrual)
OrderID -> order.ID


